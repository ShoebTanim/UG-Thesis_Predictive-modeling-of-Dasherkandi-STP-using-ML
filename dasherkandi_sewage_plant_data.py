# -*- coding: utf-8 -*-
"""Dasherkandi sewage plant data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jgOgUSPgqYWry0_7fiHeVz-D7dN09uqS
"""

!pip install sklearn.linearmodel

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import date
from subprocess import check_output
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler
import tensorflow as tf
from google.colab import files
import stat

data=pd.read_csv("normalijed all data.csv")
data

# @title inquantity

from matplotlib import pyplot as plt
data['inquantity'].plot(kind='line', figsize=(8, 4), title='inquantity')
plt.gca().spines[['top', 'right']].set_visible(False)

# @title inquantity

from matplotlib import pyplot as plt
data['inquantity'].plot(kind='hist', bins=20, title='inquantity')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title inquantity

from matplotlib import pyplot as plt
data['inquantity'].plot(kind='hist', bins=20, title='inquantity')
plt.gca().spines[['top', 'right',]].set_visible(False)

data.info()

data.shape



stat=data.describe()
stat

# @title inphnor

from matplotlib import pyplot as plt
stat['inphnor'].plot(kind='hist', bins=20, title='inphnor')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_1['Ef-Discharge to Gojaria\n(MLD)'].plot(kind='hist', bins=20, title='Ef-Discharge to Gojaria\n(MLD)')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_0['In-Quantity (SLS)\n(MLD)'].plot(kind='hist', bins=20, title='In-Quantity (SLS)\n(MLD)')
plt.gca().spines[['top', 'right',]].set_visible(False)

data.isna().any()

#correlation
correlation_matrics=data.corr()
fig=plt.figure(figsize= (17,17))
sns.heatmap(correlation_matrics, vmax= 0.9, square=True) #annot=value
plt.show()
print(correlation_matrics)

#for time series plotting, we need to convert date column into date time variables.

data["Date"]=pd.to_datetime(data["Date"])
plt.plot(data['Date'],data['In-Quantity (SLS)\n(MLD)'])

stat= stat.T
stat["variance"]=data.var()
stat["range"]=stat["max"]-stat["min"]
stat["interquartile range"]=stat["75%"]-stat["25%"]
stat

writer=pd.ExcelWriter('output.xlsx')
stat.to_excel(writer)
writer.save()
files.download("output.xlsx")

#scatterplot or pairplot
scatterfig=sns.pairplot(data)

import pandas as pd
from sklearn.model_selection import train_test_split

# Load your dataset, replace 'your_dataset.csv' with your actual dataset file
data = pd.read_csv('train data.csv')

# Split the dataset into 75% training and 25% testing
train_data, test_data = train_test_split(data, test_size=0.22, random_state=42)

# Save the split datasets as CSV files
train_data.to_csv('train_dataset.csv', index=False)
test_data.to_csv('test_dataset.csv', index=False)

print("Datasets have been split and saved successfully!")

with open('train_dataset.txt', 'r') as file:
    lines = file.readlines()

# Define the list of separators you want to remove
separators_to_remove = [';', '|', ':']  # Add all separators you want to remove

# Replace multiple separators with a single separator (',' in this example)
for i, line in enumerate(lines):
    for sep in separators_to_remove:
        lines[i] = lines[i].replace(sep, ',')

# Save the cleaned data to a new file
with open('cleaned_text_file.txt', 'w') as new_file:
    new_file.writelines(lines)



"""#random forest model"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data1 = pd.read_csv('train_dataset.csv')
data2 = pd.read_csv('test_dataset.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor', 'inphnor']
target = 'inbod5nor'  # Replace 'BOD' with your target variable name
# Split data into features and target variable
X = data1[features]
Y = data1[target]
x = data2[features]
y = data2[target]
# Split the data into training and testing sets (e.g., 80-20 split.here not necessary)
X_train =X
X_test =x
y_train =Y
y_test = y

# Create and train the Random Forest Regression model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)  # You can adjust parameters as needed
rf_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = rf_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# predicted_bod = rf_model.predict(new_data)
# print(f"Predicted BOD: {predicted_bod[0]}")

#predicting cod
# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'incodnor'  # Replace 'BOD' with your target variable name
# Split data into features and target variable
X = data1[features]
Y = data1[target]
x = data2[features]
y = data2[target]
# Split the data into training and testing sets (e.g., 80-20 split.here not necessary)
X_train =X
X_test =x
y_train =Y
y_test = y
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)  # You can adjust parameters as needed
rf_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = rf_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
print(f"Mean Absolute Error (MAE):{MAE} ")



"""COD by MLP-NN"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'incodnor'  # Replace 'BOD' with your target variable name

# Split data into features and target variable
X = data[features]
y = data[target]

# Standardize features (normalize)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create and train the Multilayer Perceptron Neural Network (MLP-NN) model
mlp_model = MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=50, random_state=42)  # You can adjust parameters as needed
mlp_model.fit(X_train, y_train)

# Make predictions using the trained model fof COD
y_pred = mlp_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
print(f"Mean absolute Error (MAE): {MAE}")

"""BOD by MLP-NN"""

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'inbod5nor'  # Replace 'BOD' with your target variable name
# Split data into features and target variable
X = data[features]
y = data[target]

# Standardize features (normalize)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Create and train the Multilayer Perceptron Neural Network (MLP-NN) model
mlp_model = MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=200, random_state=42)  # You can adjust parameters as needed
mlp_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = mlp_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE



"""Gradient boosting"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'inbod5nor'  # Replace 'BOD' with your target variable name
# Split data into features and target variable
X = data[features]
y = data[target]

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Gradient Boosting model
gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=44)  # You can adjust parameters as needed
gb_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = gb_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# predicted_bod = gb_model.predict(new_data)
# print(f"Predicted BOD: {predicted_bod[0]}")

"""COD predict"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'incodnor'  # Replace 'BOD' with your target variable name
# Split data into features and target variable
X = data[features]
y = data[target]

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Gradient Boosting model
gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)  # You can adjust parameters as needed
gb_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = gb_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

"""Regression Tree"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'incodnor'  # Replace 'BOD' with your target variable name

# Split data into features and target variable
X = data[features]
y = data[target]

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Create and train the Regression Tree model
tree_model = DecisionTreeRegressor(max_depth=1000, random_state=42)  # You can adjust parameters as needed
tree_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = tree_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# predicted_bod = tree_model.predict(new_data)
# print(f"Predicted BOD: {predicted_bod[0]}")

"""BOD prediction"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'inbod5nor'  # Replace 'BOD' with your target variable name

X = data[features]
y = data[target]

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Create and train the Regression Tree model
tree_model = DecisionTreeRegressor(max_depth=10, random_state=42)  # You can adjust parameters as needed
tree_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = tree_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# predicted_bod = tree_model.predict(new_data)
# print(f"Predicted BOD: {predicted_bod[0]}")



"""KNN"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'incodnor'  # Replace 'BOD' with your target variable name

# Split data into features and target variable
X = data[features]
y = data[target]

# Standardize features (normalize)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.1, random_state=42)

# Create and train the KNN model
knn_model = KNeighborsRegressor(n_neighbors=20)  # You can adjust parameters as needed
knn_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = knn_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# new_data_scaled = scaler.transform(new_data)
# predicted_bod = knn_model.predict(new_data_scaled)
# print(f"Predicted BOD: {predicted_bod[0]}")

"""BOD prediction

"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')
# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'inbod5nor'  # Replace 'BOD' with your target variable name

# Split data into features and target variable
X = data[features]
y = data[target]

# Standardize features (normalize)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (e.g., 80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.1, random_state=42)

# Create and train the KNN model
knn_model = KNeighborsRegressor(n_neighbors=20)  # You can adjust parameters as needed
knn_model.fit(X_train, y_train)
# Make predictions using the trained model
y_pred = knn_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

#acc = accuracy_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE



# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# new_data_scaled = scaler.transform(new_data)
# predicted_bod = knn_model.predict(new_data_scaled)
# print(f"Predicted BOD: {predicted_bod[0]}")

"""XGboosted decision tree"""

pip install xgboost

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load your dataset (replace 'your_dataset.csv' with your actual dataset file)
data = pd.read_csv('normalijed all data.csv')

"""BOD"""

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'inbod5nor'  # Replace 'BOD' with your target variable name

# Split data into features and target variable
X = data[features]
y = data[target]

# Split the data into training and testing sets (e.g., 90-10 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Create and train the XGBoost model
xgb_model = XGBRegressor(objective ='reg:squarederror', random_state=42)  # You can adjust parameters as needed
xgb_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = xgb_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE

# Optionally, you can use the trained model for predicting BOD with new data
# new_data = pd.DataFrame({'SS': [value], 'phosphorus': [value], 'ammonia': [value], 'inflow_quantity': [value]})
# predicted_bod = xgb_model.predict(new_data)
# print(f"Predicted BOD: {predicted_bod[0]}")

"""COD"""

# Define features (input variables) and target variable (BOD)
features = ['inquantitynor', 'inammonianor', 'InSSNor', 'InPhosphateNor','inphnor']
target = 'incodnor'  # Replace 'BOD' with your target variable name

# Split data into features and target variable
X = data[features]
y = data[target]
# Split the data into training and testing sets (e.g., 90-10 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Create and train the XGBoost model
xgb_model = XGBRegressor(objective ='reg:squarederror', random_state=42)  # You can adjust parameters as needed
xgb_model.fit(X_train, y_train)

# Make predictions using the trained model
y_pred = xgb_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
MAE= mean_absolute_error(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2) Score: {r2}")
MAE